# How long in ms should it be before a given check can send another alert.
alert-cooldown: 1000
# How much should we divide the alert cooldown by for verbose alerts?
# If you keep alert cooldown at 1000ms, then verbose cooldown is the max amount of alerts per player per check per second.
verbose-cooldown-divisor: 4

alert-permission: 'better.anticheat'

# What should appear when an alert is hovered over?
# Remove to disable.
# Available Placeholders:
# %clientversion% - The player's Minecraft version.
# %debug% - Any debug the check outputs.
alert-hover:
  - '&7Client Version: &c%clientversion%&7.'
  - '&7Debug: &c%debug%&7.'
  - '&7Click to teleport to the player!'

# What message should be displayed when a check is failed?
# Remove to disable.
# Available Placeholders:
# %type% - The check that was failed.
# %vl% - The amount of times this player has failed the check.
# %username% - The username of the player who failed the check.
alert-message: '&c&lBA > &r&4%username% &7failed &4%type% &7VL: &4%vl%'

# What command should be run when an alert message is clicked on?
# Remove to disable.
# Available Placeholders:
# %username% - The username of the player who failed the check.
click-command: 'tp %username%'

# If true, punishments will be delivered based on a modulo result.
# If vl modulo the punishment amount = 0, it will run that command.
# Ex: At 8 vls, 8 % 8, yes. 8 % 4, yes. 8 % 3, no. 8 % 2, yes. 8 % 1, yes.
# If false, punishments will be delivered at the written vl.
# Ex: At 8 vls, 8, yes. 4, no. 3, no. 2, no. 1, no.
punishment-modulo: true

# It is recommended to not remove the default group.
punishment-groups:
  default:
    per-group-punishments:
      - "10:say %username% has accumulated 10 total VL!"
    per-check-punishments:
      - "1:say %username% would be kicked for %type%!"
      - "5:say %username% would be banned for %type%!"
  ml-checks:
    per-group-punishments: []
    per-check-punishments: []
  chat:
    per-group-punishments: []
    per-check-punishments: []
  combat:
    per-group-punishments: []
    per-check-punishments: []
  dig:
    per-group-punishments: []
    per-check-punishments: []
  flying:
    per-group-punishments: []
    per-check-punishments: []
  heuristic:
    per-group-punishments: []
    per-check-punishments: []
  misc:
    per-group-punishments: []
    per-check-punishments: []
  packet:
    per-group-punishments: []
    per-check-punishments: []
  place:
    per-group-punishments: []
    per-check-punishments: []

# Sends alerts only to the user who triggered it. Used for testing purposes.
test-mode: false

# Should the plugin register commands? This makes most other steps to hide the anticheat pointless.
enable-commands: false

# ML Features. NOTE: These features are currently highly experimental, and are released for development purposes only.
# DO NOT USE THEM IN PRODUCTION ENVIRONMENTS WITHOUT THOROUGH TESTING
# MAKING THIS FEATURE STABLE will likely require significant and diverse amounts of extra training data, which can be collected with the record commands.
ml:
  # Whether to enable ML combat features.
  enabled: false
  # The list of models to use. Note that this does not update when the plugin is updated, so check the wiki for the latest recommended configuration, after upgrades.
  models:
    raw-data-included-v0:
      display-name: "Raw Data"
      # Options: "decision_tree_gini", "decision_tree_entropy", "random_forest_gini", "random_forest_entropy".
      type: "decision_tree_gini"
      # The data slice to use (0 for yaw changes, 1 for offsets, 2 for combined).
      slice: 0
      # Included: legit-small-2025-06-24-1 (notice: this comment does not update when the plugin is updated, so check the wiki for the latest version).
      legit-dataset-names: ["legit-small-2025-06-24-1"]
      # Included: cheat-small-2025-06-24-1 (notice: this comment does not update when the plugin is updated, so check the wiki for the latest version).
      cheat-dataset-names: ["cheat-small-2025-06-24-1"]
      # Should we extract statistics from the data before using the model?
      statistics: false
      # Should we shrink both datasets to the same size?
      shrink: false
      # For decision trees/random forests, what should be the maximum depth of the tree?
      # Higher values can increase accuracy, but lead to severe overfitting.
      # Lower values will significantly reduce overfitting, but slightly decrease accuracy (~15% drop from 40 to 25).
      tree-depth: 35
      # How many samples to use for runtime classification.
      samples: 15
      # Required average of samples to flag the player (9.5 == Definitely cheating, 3 == Probably not cheating).
      # This is more a guide for the internal validation settings, than it is a strict value.
      threshold: 6.5
      # Enable this model check?
      enabled: true
      # The minimum vl required to run an alert, after the samples/threshold requirement have been met.
      alert-vl: 200
      # The minimum vl required to run a verbose alert, after the samples/threshold requirement have been met.
      verbose-vl: 1
      # The punishment command to run when a player is flagged by this model.
      punishment-groups:
        - "ml-checks"
    statistics-included-v0:
      display-name: "Statistics"
      # Options: "decision_tree_gini", "decision_tree_entropy", "random_forest_gini", "random_forest_entropy".
      type: "decision_tree_gini"
      # The data slice to use (0 for yaw changes, 1 for offsets, 2 for combined).
      slice: 2
      # Included: legit-small-2025-06-24-1 (notice: this comment does not update when the plugin is updated, so check the wiki for the latest version).
      legit-dataset-names: ["legit-small-2025-06-24-1"]
      # Included: cheat-small-2025-06-24-1 (notice: this comment does not update when the plugin is updated, so check the wiki for the latest version).
      cheat-dataset-names: ["cheat-small-2025-06-24-1"]
      # Should we extract statistics from the data before using the model?
      statistics: true
      # Should we shrink both datasets to the same size?
      shrink: false
      # For decision trees/random forests, what should be the maximum depth of the tree?
      # Higher values can increase accuracy, but lead to severe overfitting.
      # Lower values will significantly reduce overfitting, but slightly decrease accuracy (~15% drop from 40 to 25).
      tree-depth: 35
      # How many samples to use for runtime classification.
      samples: 20
      # Required average of samples to flag the player (9.5 == Definitely cheating, 2.5 == Probably not cheating).
      # This is more a guide for the internal validation settings, than it is a strict value.
      threshold: 5.5
      # Enable this model check?
      enabled: true
      # The minimum vl required to run an alert, after the samples/threshold requirement have been met.
      alert-vl: 200
      # The minimum vl required to run a verbose alert, after the samples/threshold requirement have been met.
      verbose-vl: 1
      # The punishment command to run when a player is flagged by this model.
      punishment-groups:
        - "ml-checks"

  # ML Combat Damage Modification
  # This feature modifies combat damage based on ML tracker averages
  combat-damage-mitigation:
    # Whether to enable ML-based combat damage modification
    # Only works when ML is enabled.
    enabled: true
    # The threshold average value above which damage modification is applied
    threshold: 5.0
    # Multiplier for hit cancellation chance (average * multiplier = % chance), average is 1-10, where 10 is definitely cheating, and 1 is not cheating.
    cancellation-multiplier: 2.5
    # Multiplier for damage reduction calculation (100 - (average * multiplier))% of original damage, average is 1-10, where 10 is definitely cheating, and 1 is not cheating.
    # Not supported on Sponge and Velocity.
    damage-reduction-multiplier: 4.0
    # Mess with hitreg to make life horrible for cheaters? Works by giving the person who is attacking the cheater server-side hitbox and reach cheats.
    # Can break other anticheat's reach and hitbox checks.
    # Is probably the most OP mitigation.
    mess-with-hitreg: true
    # Tick-based attack cancellation. Is effectively a cps limit for cheaters.
    tick-mitigation:
      enabled: true
      # Minimum number of ticks allowed since the last attack.
      min-ticks-since-last-attack: 3
      # The minimum ML average required to apply the tick check.
      min-average-for-tick-check: 7.0

cookie-allocator:
  # The type of cookie ID allocator to use.
  # Options: "sequential", "random", "timestamp", "file", "lyric"
  type: lyric
  parameters:
    # For "sequential" allocator:
    # The starting value for the sequential cookie IDs. Default: 0
    startValue: -147483648

    # For "random" allocator:
    # The length of generated cookie IDs in bytes. Default: 8
    cookieLength: 8
    # Maximum retries for ensuring uniqueness of random cookie IDs. Default: 100
    maxRetries: 100

    # For "timestamp" allocator:
    # The number of random bytes to append to the timestamp. Default: 4
    randomBytesLength: 8

    # For "file" allocator:
    # The name of the file containing cookie sequences. Default: alphabet.txt
    # Files can be placed in src/main/resources/ (for inclusion in the plugin JAR)
    # or in {BetterAnticheat.directory}/cookiesequence/ (for external loading).
    filename: alphabet.txt

    # For "lyric" allocator:

    # Recommended #1: Artist: "Lana Del Rey", Song: "God Bless America - And All The Beautiful Women In It"
    # Recommended #2: Artist: "2 Live Crew", Song: "The Fuck Shop"
    # Recommended #3: Artist: "Metallica" - Song: "So What"
    # Recommended #4: Artist: "Mao Ze" - Song: "Red Sun in the Sky"
    # Recommended #5: Artist: "Rihanna" - Song: "Diamonds"

    # The artist of the song for lyric cookies. Default: ""
    artist: ""
    # The title of the song for lyric cookies. Default: "Hatikvah"
    # The song must have at least 50 lines of lyrics.
    title: "Hatikvah"
    # The maximum number of lyric lines to use (0 for all). Default: 0
    maxLines: 0
